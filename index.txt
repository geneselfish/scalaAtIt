スケーラブルで関数型でオブジェクト指向なScala入門
http://www.atmarkit.co.jp/fjava/index/index_scala.html
scalaAtItプロジェクト
 chap2
   Sect1
   　型推論
   　エスケープシーケンス
   　シンボルリテラル
   Sect2
   　配列　「Array」クラス
   　演算子　
 chap3
   Sect1
   　コレクション　List、Map、Tuple
   Sect2
   　制御構造
   　　・if
   　　・繰り返し「for」　
   　　　　forのフィルタ
   　　　　「yield」を使用して新しいコレクションを生成
   　　・例外処理
  chap4
    Sect1
    　パターンマッチ　パターンガード
    Sect2
    　関数
    　関数リテラル
    　プレイスホルダによる引数の簡略化
    　高階関数
    Sect3
    　関数の引数を固定しない「可変長引数」
    　デフォルト引数
    　プレイスホルダ構文
    　関数の中で関数を定義する「ローカル関数」
   
 chap5_2
     基本コンストラクタ 　補助コンストラクタ
   　引数がnullだったらエラー※事前条件を指定する「require」キーワード
   　コンパニオンオブジェクト
   　applyメソッドは省略可能（シンタックスシュガー。糖衣構文）
 chap5_3_1
  　「Option」型　Some、None
  　「unapply」を使用したパターンマッチ 　
 chap5_3_2
 　「caseクラス」でオブクジェクトを簡単にパターンマッチ
 
 chap6
 chap6.foo.bar
    パッケージ。パッケージオブジェクト。
 chap6.sect2
    アクセス修飾子とアクセス制限
 chap6.sect2_3
    「継承」「抽象クラス」
 chap6.sect3.sealedmodel
    シールドクラス
    
 chap7
    トレイト。
    ミックスインは定義時だけではなく、インスタンス化のタイミングで行うこともできる。
    コンストラクタの実行順序。
 chap7.sect2
    トレイトで「super」を使用。
    トレイト単体での使用。
 chap7.sect2_2
    「abstract override」キーワード。
    トレイトの「線形化」
 chap7.sect3
    線形化順序
    

特に税込み100万越えという価格は心理的に購入を躊躇させる一線を越えた価格設定という感があります。
抵抗感が
待っているうちに段々、これを買うくらいなら、安くなったＭ９の中古とレンズを買った方が有意義
ではないかという気がしてきました。
撮像素子の進歩は目覚しく、数年後に有機センサーや多層センサーが実用的な物になったら、
100万以上もした物があっという間に陳腐化しちまいます。
撮像素子と画像処理エンジンだけ最新のものに交換できたらいいんですけど・・・
私が富豪ならこんなことで悩まないで済むんでしょうけどね。

発表から発売までの期間は、冷静になって考え直し、あれこれ逡巡するのに十分な長さの期間ではあります。
